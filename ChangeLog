Version 5.0
* Added deductive type of Engine with Engine::type()
* Modified FclExporter and FisExporter to provide backward compatibility with FCL and FIS formats
* Updated the FIS and FCL examples for backward compatibility
* Included the original example files
* Updated FLD examples produced from the engines of the original examples
* Fixed some original examples of takagi-sugeno to use AlgebraicProduct activation
* FldExporter no longer restarts the engine
* FldExporter exports from a custom input dataset
* Console includes option to read custom input dataset from file
* Console provides more information about its usage
* Renamed methods FldExporter::toWriter() to FldExporter::write()
* Removed variable and methods for property FldExporter::maximum
* Accuracy improvements importing fis files with large number of decimals
* Updated FLD examples to reflect accuracy
* Changed operation for multiple hedges to operate from last to first
* Fixed OutputVariable to store previous valid output value regardless of locks
* New OutputVariable::(get|set)OutputValue to store value from defuzzification
* Changed OutputVariable::defuzzify to store its output value
* Changed return type of scalar OutputVariable::defuzzify to void OutputVariable::defuzzify
* Renamed OutputVariable::(get|set)LastValidOutput to OutputVariable::(get|set)LastValidOutputValue
* Removed OutputVariable::defuzzifyNoLocks
* Added InputVariable::fuzzyInputValue and OutputVariable::fuzzyOutputValue
* Removed defaults in Engine::configure
* Added Engine::configure without conjuntion and disjuntion
* Added parameter string to Engine::type
* Changed Engine::isReady
* Correct handling of integral defuzzification with min|max=NaN|Inf
* Added method Rule::isLoaded to determine whether a rule is to be activated
* Added method Rule::unload to allow existence of invalid rules
* Added methods Engine::set((Input|Output)Variables), Engine::setRuleBlocks
* Added method RuleBlock::setRules
* Changed visibility of Rule::setText to public
* Added method Rule::load(Engine)
* Renamed term Thresholded to Activated
* Renamed Thresholded::(set|get)Threshold to Activated::(set|get)Degree
* Removed variable Rule::FL_ASSIGNS="=" and method Rule::assignsKeyword()
* Modified original takagi-sugeno examples to reflect proper activation and accumulation
* Moved Engine::_hedges (and methods) to Rule::_hedges
* Renamed Antecedent::(get|set)Root to Antecedent::(get|set)Expression
* Added (Antecedent|Consequent)::(get|set)Text
* Added (Antecedent|Consequent)::load|unload
* Added an M-file to compare output values of fuzzylite engines with Matlab
* Removed const from Norms in RuleBlock::(get|set)(Activation|Conjunction|Disjunction)
* Deleted method Op::repeat
* Added built-in functions gt,lt,ge,le,eq and operator !
* Renamed Term::copy to Term::clone in every Term
* Merged Function::Operator and Function::BuiltInFunction into Function::Element
* Created FunctionFactory for Function::Elements
* IMPORTANT: Changed starting precedence of Function::Element::Operators to 10 (refer to FunctionFactory)
* Renamed Factory<T>::(register|deregister)Class to Factory<T>::(register|deregister)Constructor
* Renamed Factory<T> to ConstructionFactory<T>
* Created CloningFactory<T>
* Moved functions and operators of term Function to a FunctionFactory
* Added clone methods to Defuzzifiers, Hedges, Norms, and Terms
* Added methods Engine::set((Input|Output)Variable) and Engine::setRuleBlock()
* Added method RuleBlock::reloadRules()
* Changed Linear pointers to input variables for a pointer to Engine
* Added support to compare infinity values with fl::Op::isEq and therefore other comparison operators
* Parameters of all terms are set to fl::nan by default
* Added methods Engine::get(Input|Output)Variables() and ::getRuleBlocks() to return mutable references
* Added method Variable::getTerms() to return mutable reference
* Added method RuleBlock::getRules() to return mutable reference
* Added methods Ramp::direction() and Sigmoid::direction() to represent direction of slope
* Added method Op::isFinite(x) to check x is not (nan or inf)
* Changed Op::isEq(a,b) to return true if a = b = NaN
* Added method Accumulated::getTerms() to return mutable reference
* Changed visibility of Linear::coefficients to private
* Added methods Linear::getCoefficients(), Linear::setCoefficients()
* Removed public variables Discrete::x,y
* Added in Discrete a class Pair, and changed signatures of methods and types of their parameters
* Changed representation of Discrete::(x,y) from List<Double> to List<Pair>
* Added methods Discrete::setXY(), Discrete::getXY(), to set and get new representation
* Added methods Discrete::toPairs(List<Double>) and Discrete::toList(List<Pair>)
* Added method Discrete::formatXY() to get pairs (x,y) nicely formatted
* Linear term no longer throws exception when inputVariables != |coefficients|
* Changed visibility of Function::root to private 
* Added method Function::getRoot() to return pointer to Function::root
* Added option to prefix the namespace in CppExporter, by default it does not prefix
* Added method OutputVariable::clear() to restart the output variable
* Renamed variable OutputVariable::lastValidOutputValue to ::previousOutputValue
* Renamed method OutputVariable::(get|set)LastValidOutputValue to ::(get|set)PreviousOutputValue
* Renamed variable OutputVariable::lockOutputRange to ::lockOutputValueInRange
* Renamed method OutputVariable::setLockOutputRange() to ::setLockOutputValueInRange
* Renamed method OutputVariable::isLockingOutputRange() to ::isLockOutputValueInRange
* Renamed variable OutputVariable::lockValidOutput to ::lockPreviousOutputValue
* Renamed method OutputVariable::setLockValidOutput() to ::setLockPreviousOutputValue
* Renamed method OutputVariable::isLockingValidOutput() to ::isLockPreviousOutputValue
* Renamed FLL property 'lock-valid' to 'lock-previous'
* Renamed FIS property 'LockValid' to 'LockPrevious'
* Renamed FCL property 'LOCK: VALID' to 'LOCK: PREVIOUS'
* Added method Engine::variables() to retrieve both Input and OutputVariables
* Added method Term::updateReference(Term*, Engine*) to ensure Linear and Function terms to update references of engines
* Added in Discrete a class Pair, and changed signatures of methods and types of their parameters
* Added terms: Concave, Cosine and Spike
* Renamed methods Triangle::(set|get)(A|B|C) to (set|get)(Vertex(A|B|C))
* Renamed methods Trapezoid::(set|get)(A|B|C|D) to (set|get)(Vertex(A|B|C|D))
* Removed method fuzzylite::configuration()
* Renamed methods in (Fis|Fcl)Importers::extract* to ::parse*
* Made defaultResolution a static property of IntegralDefuzzifiers
* Added method Engine::type(name, reason) to show type and reason why type
* Added method Engine::clone()
* Added support for Tsukamoto with Concave terms
* Changed Accumulated to take Activated terms instead of Terms
* Deleted class Tsukamoto
* Created class WeightedDefuzzifier from which Weighted(Average|Sum) derive with options: Automatic|TakagiSugeno|Tsukamoto
* Added methods WeightedDefuzzifier::tsukamoto() and ::inferType()
* Added benchmarks for fuzzylite in Linux
* Created the FuzzyLite Interactive Console
* Added basic rule chaining such that Output Variables can be utilized as antecedents
* Added two examples for rule chaining: mamdani/Laundry.fll and mamdani/SimpleDimmerInverse.fll
* Added Term::(get|set)Height and changed all terms accordingly
* Renamed method Op::makeValidId to Op::validName, which now returns "unnamed" for empty strings.
* Converted examples/original/*.fis to examples/original/*.fll
* Removed Exception Specification from methods in Discrete, Linear and Function terms
* Removed method Operation::toScalar(std::string, bool, scalar)
* Added method Operation::toScalar(std::string) [throws Exception], and ::toScalar(std::string, scalar alternative) throw()
* Added method ImEx::(from|to)File to import and export engines using files
* WeightedAverage and WeightedSum without Activation operators have default behaviour, i.e., AlgebraicProduct
* Changed default to fuzzylite::_macheps = 1e-6;
