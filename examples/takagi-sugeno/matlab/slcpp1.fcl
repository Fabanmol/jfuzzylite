FUNCTION_BLOCK slcpp

VAR_INPUT
  in1: REAL;
  in2: REAL;
  in3: REAL;
  in4: REAL;
  in5: REAL;
  in6: REAL;
  pole_length: REAL;
END_VAR

VAR_OUTPUT
  out: REAL;
END_VAR

FUZZIFY in1
  ENABLED : TRUE;
  RANGE := (-0.30000000 .. 0.30000000);
END_FUZZIFY

FUZZIFY in2
  ENABLED : TRUE;
  RANGE := (-1.00000000 .. 1.00000000);
END_FUZZIFY

FUZZIFY in3
  ENABLED : TRUE;
  RANGE := (-3.00000000 .. 3.00000000);
END_FUZZIFY

FUZZIFY in4
  ENABLED : TRUE;
  RANGE := (-3.00000000 .. 3.00000000);
END_FUZZIFY

FUZZIFY in5
  ENABLED : TRUE;
  RANGE := (-3.00000000 .. 3.00000000);
END_FUZZIFY

FUZZIFY in6
  ENABLED : TRUE;
  RANGE := (-3.00000000 .. 3.00000000);
END_FUZZIFY

FUZZIFY pole_length
  ENABLED : TRUE;
  RANGE := (0.50000000 .. 1.50000000);
  TERM mf1 := ZShape 0.50000000 0.60000000;
  TERM mf2 := PiShape 0.50000000 0.60000000 0.60000000 0.70000000;
  TERM mf3 := PiShape 0.60000000 0.70000000 0.70000000 0.80000000;
  TERM mf4 := PiShape 0.70000000 0.80000000 0.80000000 0.90000000;
  TERM mf5 := PiShape 0.80000000 0.90000000 0.90000000 1.00000000;
  TERM mf6 := PiShape 0.90000000 1.00000000 1.00000000 1.10000000;
  TERM mf7 := PiShape 1.00000000 1.10000000 1.10000000 1.20000000;
  TERM mf8 := PiShape 1.10000000 1.20000000 1.20000000 1.30000000;
  TERM mf9 := PiShape 1.20000000 1.30000000 1.30000000 1.40000000;
  TERM mf10 := PiShape 1.30000000 1.40000000 1.40000000 1.50000000;
  TERM mf11 := SShape 1.40000000 1.50000000;
END_FUZZIFY

DEFUZZIFY out
  ENABLED : TRUE;
  RANGE := (-10.00000000 .. 10.00000000);
  TERM outmf1 := Linear 168.40000000 31.00000000 -188.05000000 -49.25000000 -1.00000000 -2.70000000 0.00000000 0.00000000;
  TERM outmf2 := Linear 233.95000000 47.19000000 -254.52000000 -66.58000000 -1.00000000 -2.74000000 0.00000000 0.00000000;
  TERM outmf3 := Linear 342.94000000 74.73000000 -364.37000000 -95.23000000 -1.00000000 -2.78000000 0.00000000 0.00000000;
  TERM outmf4 := Linear 560.71000000 130.67000000 -582.96000000 -152.24000000 -1.00000000 -2.81000000 0.00000000 0.00000000;
  TERM outmf5 := Linear 1213.88000000 300.19000000 -1236.90000000 -322.80000000 -1.00000000 -2.84000000 0.00000000 0.00000000;
  TERM outmf6 := Linear 0.00000000 0.00000000 0.00000000 0.00000000 0.00000000 0.00000000 0.00000000 0.00000000;
  TERM outmf7 := Linear -1399.12000000 -382.95000000 1374.63000000 358.34000000 -1.00000000 -2.90000000 0.00000000 0.00000000;
  TERM outmf8 := Linear -746.07000000 -213.42000000 720.90000000 187.84000000 -1.00000000 -2.93000000 0.00000000 0.00000000;
  TERM outmf9 := Linear -528.52000000 -157.46000000 502.68000000 130.92000000 -1.00000000 -2.96000000 0.00000000 0.00000000;
  TERM outmf10 := Linear -419.87000000 -129.89000000 393.38000000 102.41000000 -1.00000000 -2.98000000 0.00000000 0.00000000;
  TERM outmf11 := Linear -354.77000000 -113.68000000 327.65000000 85.27000000 -1.00000000 -3.01000000 0.00000000 0.00000000;
  METHOD : COGS;
  ACCU : MAX;
  DEFAULT := nan;
END_DEFUZZIFY

RULEBLOCK 
  ENABLED : TRUE;
  AND : PROD;
  OR : MAX;
  ACT : PROD;
  RULE 1 : if pole_length is mf1 then out is outmf1
  RULE 2 : if pole_length is mf2 then out is outmf2
  RULE 3 : if pole_length is mf3 then out is outmf3
  RULE 4 : if pole_length is mf4 then out is outmf4
  RULE 5 : if pole_length is mf5 then out is outmf5
  RULE 6 : if pole_length is mf6 then out is outmf6
  RULE 7 : if pole_length is mf7 then out is outmf7
  RULE 8 : if pole_length is mf8 then out is outmf8
  RULE 9 : if pole_length is mf9 then out is outmf9
  RULE 10 : if pole_length is mf10 then out is outmf10
  RULE 11 : if pole_length is mf11 then out is outmf11
END_RULEBLOCK

END_FUNCTION_BLOCK
