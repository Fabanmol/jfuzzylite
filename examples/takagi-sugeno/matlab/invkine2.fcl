FUNCTION_BLOCK invkine2

VAR_INPUT
  input1: REAL;
  input2: REAL;
END_VAR

VAR_OUTPUT
  output: REAL;
END_VAR

FUZZIFY input1
  ENABLED : TRUE;
  RANGE := (-6.28700000 .. 17.00000000);
  TERM in1mf1 := Bell -5.76300000 3.01500000 1.85100000;
  TERM in1mf2 := Bell -1.62400000 3.13000000 2.11100000;
  TERM in1mf3 := Bell 3.55200000 3.19300000 2.10400000;
  TERM in1mf4 := Bell 8.27300000 2.90700000 1.98500000;
  TERM in1mf5 := Bell 13.23200000 2.70800000 2.05600000;
  TERM in1mf6 := Bell 17.78300000 1.63500000 1.89700000;
END_FUZZIFY

FUZZIFY input2
  ENABLED : TRUE;
  RANGE := (0.00000000 .. 16.97200000);
  TERM in2mf1 := Bell 0.00500000 1.87700000 1.99500000;
  TERM in2mf2 := Bell 3.31200000 2.01700000 1.82900000;
  TERM in2mf3 := Bell 6.56800000 2.26100000 1.79300000;
  TERM in2mf4 := Bell 10.11100000 2.74100000 1.97800000;
  TERM in2mf5 := Bell 14.95200000 2.04500000 1.78300000;
  TERM in2mf6 := Bell 17.91000000 0.82400000 1.73400000;
END_FUZZIFY

DEFUZZIFY output
  ENABLED : TRUE;
  RANGE := (0.00000000 .. 3.10000000);
  TERM out1mf1 := Linear -0.04800000 1.45600000 2.22200000;
  TERM out1mf2 := Linear -0.21800000 -0.30500000 2.04200000;
  TERM out1mf3 := Linear 0.02600000 -0.14100000 3.06700000;
  TERM out1mf4 := Linear 0.05200000 -0.15000000 3.41900000;
  TERM out1mf5 := Linear 0.11300000 -0.18900000 4.33900000;
  TERM out1mf6 := Linear 2.54300000 0.36100000 -2.73800000;
  TERM out1mf7 := Linear 2.51700000 -6.80900000 23.35300000;
  TERM out1mf8 := Linear -0.20800000 -0.39400000 4.47200000;
  TERM out1mf9 := Linear -0.04600000 -0.30000000 4.45200000;
  TERM out1mf10 := Linear -0.00600000 -0.21700000 4.19500000;
  TERM out1mf11 := Linear 0.08900000 -0.25400000 4.99200000;
  TERM out1mf12 := Linear -0.03300000 0.10300000 -2.01200000;
  TERM out1mf13 := Linear 1.35500000 1.22800000 -5.67800000;
  TERM out1mf14 := Linear -0.24500000 -0.12400000 3.75300000;
  TERM out1mf15 := Linear -0.09900000 -0.11100000 3.30400000;
  TERM out1mf16 := Linear -0.05200000 -0.16300000 3.56000000;
  TERM out1mf17 := Linear 0.09900000 -0.26000000 4.66200000;
  TERM out1mf18 := Linear 0.08200000 -1.84900000 31.10400000;
  TERM out1mf19 := Linear 2.18000000 -2.96300000 -0.06100000;
  TERM out1mf20 := Linear -0.98200000 0.51000000 5.65700000;
  TERM out1mf21 := Linear -0.08700000 -0.17900000 3.74400000;
  TERM out1mf22 := Linear -0.12400000 -0.16100000 4.09400000;
  TERM out1mf23 := Linear 0.38300000 0.00700000 -1.55900000;
  TERM out1mf24 := Linear -8.41500000 2.08300000 5.17700000;
  TERM out1mf25 := Linear 1.72100000 -15.07900000 -0.68700000;
  TERM out1mf26 := Linear -1.04300000 -0.78600000 20.51000000;
  TERM out1mf27 := Linear -0.24900000 -0.39600000 6.99500000;
  TERM out1mf28 := Linear -0.07600000 -0.24500000 4.41600000;
  TERM out1mf29 := Linear 0.76500000 -1.48800000 17.38400000;
  TERM out1mf30 := Linear -21.21000000 -43.02200000 -2.52200000;
  TERM out1mf31 := Linear -0.66100000 3.52300000 6.21500000;
  TERM out1mf32 := Linear -1.99800000 1.58200000 33.25600000;
  TERM out1mf33 := Linear -2.06800000 5.67300000 6.52000000;
  TERM out1mf34 := Linear -5.04400000 7.09300000 3.51600000;
  TERM out1mf35 := Linear -46.04900000 -35.02100000 -2.92600000;
  TERM out1mf36 := Linear -0.44800000 -0.77000000 -0.04100000;
  METHOD : COGS;
  ACCU : MAX;
  DEFAULT := nan;
END_DEFUZZIFY

RULEBLOCK 
  ENABLED : TRUE;
  AND : PROD;
  OR : MAX;
  ACT : PROD;
  RULE 1 : if input1 is in1mf1 and input2 is in2mf1 then output is out1mf1
  RULE 2 : if input1 is in1mf1 and input2 is in2mf2 then output is out1mf2
  RULE 3 : if input1 is in1mf1 and input2 is in2mf3 then output is out1mf3
  RULE 4 : if input1 is in1mf1 and input2 is in2mf4 then output is out1mf4
  RULE 5 : if input1 is in1mf1 and input2 is in2mf5 then output is out1mf5
  RULE 6 : if input1 is in1mf1 and input2 is in2mf6 then output is out1mf6
  RULE 7 : if input1 is in1mf2 and input2 is in2mf1 then output is out1mf7
  RULE 8 : if input1 is in1mf2 and input2 is in2mf2 then output is out1mf8
  RULE 9 : if input1 is in1mf2 and input2 is in2mf3 then output is out1mf9
  RULE 10 : if input1 is in1mf2 and input2 is in2mf4 then output is out1mf10
  RULE 11 : if input1 is in1mf2 and input2 is in2mf5 then output is out1mf11
  RULE 12 : if input1 is in1mf2 and input2 is in2mf6 then output is out1mf12
  RULE 13 : if input1 is in1mf3 and input2 is in2mf1 then output is out1mf13
  RULE 14 : if input1 is in1mf3 and input2 is in2mf2 then output is out1mf14
  RULE 15 : if input1 is in1mf3 and input2 is in2mf3 then output is out1mf15
  RULE 16 : if input1 is in1mf3 and input2 is in2mf4 then output is out1mf16
  RULE 17 : if input1 is in1mf3 and input2 is in2mf5 then output is out1mf17
  RULE 18 : if input1 is in1mf3 and input2 is in2mf6 then output is out1mf18
  RULE 19 : if input1 is in1mf4 and input2 is in2mf1 then output is out1mf19
  RULE 20 : if input1 is in1mf4 and input2 is in2mf2 then output is out1mf20
  RULE 21 : if input1 is in1mf4 and input2 is in2mf3 then output is out1mf21
  RULE 22 : if input1 is in1mf4 and input2 is in2mf4 then output is out1mf22
  RULE 23 : if input1 is in1mf4 and input2 is in2mf5 then output is out1mf23
  RULE 24 : if input1 is in1mf4 and input2 is in2mf6 then output is out1mf24
  RULE 25 : if input1 is in1mf5 and input2 is in2mf1 then output is out1mf25
  RULE 26 : if input1 is in1mf5 and input2 is in2mf2 then output is out1mf26
  RULE 27 : if input1 is in1mf5 and input2 is in2mf3 then output is out1mf27
  RULE 28 : if input1 is in1mf5 and input2 is in2mf4 then output is out1mf28
  RULE 29 : if input1 is in1mf5 and input2 is in2mf5 then output is out1mf29
  RULE 30 : if input1 is in1mf5 and input2 is in2mf6 then output is out1mf30
  RULE 31 : if input1 is in1mf6 and input2 is in2mf1 then output is out1mf31
  RULE 32 : if input1 is in1mf6 and input2 is in2mf2 then output is out1mf32
  RULE 33 : if input1 is in1mf6 and input2 is in2mf3 then output is out1mf33
  RULE 34 : if input1 is in1mf6 and input2 is in2mf4 then output is out1mf34
  RULE 35 : if input1 is in1mf6 and input2 is in2mf5 then output is out1mf35
  RULE 36 : if input1 is in1mf6 and input2 is in2mf6 then output is out1mf36
END_RULEBLOCK

END_FUNCTION_BLOCK
