FUNCTION_BLOCK invkine1

VAR_INPUT
  input1: REAL;
  input2: REAL;
END_VAR

VAR_OUTPUT
  output: REAL;
END_VAR

FUZZIFY input1
  ENABLED : TRUE;
  RANGE := (-6.28700000 .. 17.00000000);
  TERM in1mf1 := Bell -6.12200000 2.25900000 1.76100000;
  TERM in1mf2 := Bell -2.18100000 2.09500000 2.23200000;
  TERM in1mf3 := Bell 2.08000000 2.15700000 1.31400000;
  TERM in1mf4 := Bell 4.96200000 2.79000000 2.50800000;
  TERM in1mf5 := Bell 9.33800000 2.50600000 1.81200000;
  TERM in1mf6 := Bell 13.15000000 2.36300000 2.26700000;
  TERM in1mf7 := Bell 17.78900000 1.31000000 1.75600000;
END_FUZZIFY

FUZZIFY input2
  ENABLED : TRUE;
  RANGE := (0.00000000 .. 16.97200000);
  TERM in2mf1 := Bell 0.62100000 1.74100000 2.45400000;
  TERM in2mf2 := Bell 2.40600000 0.86600000 1.27800000;
  TERM in2mf3 := Bell 4.88300000 1.81400000 2.40200000;
  TERM in2mf4 := Bell 8.08700000 1.94100000 1.92900000;
  TERM in2mf5 := Bell 11.42800000 2.33300000 2.02200000;
  TERM in2mf6 := Bell 14.57900000 2.22100000 1.85800000;
  TERM in2mf7 := Bell 17.81300000 0.82000000 1.57700000;
END_FUZZIFY

DEFUZZIFY output
  ENABLED : TRUE;
  RANGE := (0.00000000 .. 1.50000000);
  TERM out1mf1 := Linear -0.91200000 2.51700000 0.06100000;
  TERM out1mf2 := Linear -2.15300000 -2.20400000 -4.03700000;
  TERM out1mf3 := Linear -0.10700000 -0.14800000 1.92000000;
  TERM out1mf4 := Linear -0.08800000 -0.07100000 1.59300000;
  TERM out1mf5 := Linear -0.09800000 -0.04000000 1.36100000;
  TERM out1mf6 := Linear -0.06800000 -0.02700000 1.61700000;
  TERM out1mf7 := Linear -1.90100000 -0.08100000 0.18500000;
  TERM out1mf8 := Linear 16.65100000 11.71300000 6.80300000;
  TERM out1mf9 := Linear -4.15200000 -1.03300000 -4.75500000;
  TERM out1mf10 := Linear -0.12300000 0.00400000 0.86100000;
  TERM out1mf11 := Linear -0.10200000 0.00600000 0.81600000;
  TERM out1mf12 := Linear -0.08900000 0.03800000 0.51500000;
  TERM out1mf13 := Linear -0.07400000 0.08200000 -0.06100000;
  TERM out1mf14 := Linear -0.00900000 -0.17300000 4.84100000;
  TERM out1mf15 := Linear -7.99500000 -2.81800000 17.91000000;
  TERM out1mf16 := Linear 0.67400000 0.74500000 -2.16700000;
  TERM out1mf17 := Linear -0.13000000 -0.00400000 0.86900000;
  TERM out1mf18 := Linear -0.09400000 0.06100000 0.36600000;
  TERM out1mf19 := Linear -0.08700000 0.12100000 -0.39500000;
  TERM out1mf20 := Linear -0.06100000 0.16200000 -1.31200000;
  TERM out1mf21 := Linear -0.16300000 0.92000000 -13.25300000;
  TERM out1mf22 := Linear 1.41700000 3.07200000 1.88100000;
  TERM out1mf23 := Linear -0.95000000 -0.73200000 3.12800000;
  TERM out1mf24 := Linear -0.05800000 0.16200000 -0.53000000;
  TERM out1mf25 := Linear -0.04400000 0.07700000 -0.12100000;
  TERM out1mf26 := Linear -0.06100000 0.05400000 0.27300000;
  TERM out1mf27 := Linear -0.06800000 0.09900000 -0.25000000;
  TERM out1mf28 := Linear 0.42900000 0.61000000 -9.11800000;
  TERM out1mf29 := Linear -6.66100000 -3.69700000 0.01500000;
  TERM out1mf30 := Linear -3.54400000 8.99500000 0.39600000;
  TERM out1mf31 := Linear 0.21000000 -0.13700000 -1.01000000;
  TERM out1mf32 := Linear -0.00300000 0.13700000 -1.21000000;
  TERM out1mf33 := Linear -0.03000000 0.01800000 0.10700000;
  TERM out1mf34 := Linear -0.22700000 -0.30600000 6.55000000;
  TERM out1mf35 := Linear 11.00500000 -3.37500000 -1.13500000;
  TERM out1mf36 := Linear 0.57800000 0.03300000 -0.10400000;
  TERM out1mf37 := Linear 0.89500000 -3.26800000 -0.99200000;
  TERM out1mf38 := Linear 0.12500000 0.00600000 -1.73300000;
  TERM out1mf39 := Linear 0.04400000 0.00300000 -0.30300000;
  TERM out1mf40 := Linear -0.17900000 -0.09300000 3.45800000;
  TERM out1mf41 := Linear 0.22200000 0.59700000 -10.10200000;
  TERM out1mf42 := Linear 9.32000000 13.69200000 0.85800000;
  TERM out1mf43 := Linear 0.16100000 -0.11700000 -1.38200000;
  TERM out1mf44 := Linear 0.49500000 -0.83300000 -6.56400000;
  TERM out1mf45 := Linear 0.46500000 -0.78700000 -5.61000000;
  TERM out1mf46 := Linear 1.33400000 -3.01700000 -2.87100000;
  TERM out1mf47 := Linear 2.56100000 -0.86400000 -0.55700000;
  TERM out1mf48 := Linear 17.12300000 11.15000000 1.00600000;
  TERM out1mf49 := Linear 0.22000000 0.15400000 0.01000000;
  METHOD : COGS;
  ACCU : MAX;
  DEFAULT := nan;
END_DEFUZZIFY

RULEBLOCK 
  ENABLED : TRUE;
  AND : PROD;
  OR : MAX;
  ACT : PROD;
  RULE 1 : if input1 is in1mf1 and input2 is in2mf1 then output is out1mf1
  RULE 2 : if input1 is in1mf1 and input2 is in2mf2 then output is out1mf2
  RULE 3 : if input1 is in1mf1 and input2 is in2mf3 then output is out1mf3
  RULE 4 : if input1 is in1mf1 and input2 is in2mf4 then output is out1mf4
  RULE 5 : if input1 is in1mf1 and input2 is in2mf5 then output is out1mf5
  RULE 6 : if input1 is in1mf1 and input2 is in2mf6 then output is out1mf6
  RULE 7 : if input1 is in1mf1 and input2 is in2mf7 then output is out1mf7
  RULE 8 : if input1 is in1mf2 and input2 is in2mf1 then output is out1mf8
  RULE 9 : if input1 is in1mf2 and input2 is in2mf2 then output is out1mf9
  RULE 10 : if input1 is in1mf2 and input2 is in2mf3 then output is out1mf10
  RULE 11 : if input1 is in1mf2 and input2 is in2mf4 then output is out1mf11
  RULE 12 : if input1 is in1mf2 and input2 is in2mf5 then output is out1mf12
  RULE 13 : if input1 is in1mf2 and input2 is in2mf6 then output is out1mf13
  RULE 14 : if input1 is in1mf2 and input2 is in2mf7 then output is out1mf14
  RULE 15 : if input1 is in1mf3 and input2 is in2mf1 then output is out1mf15
  RULE 16 : if input1 is in1mf3 and input2 is in2mf2 then output is out1mf16
  RULE 17 : if input1 is in1mf3 and input2 is in2mf3 then output is out1mf17
  RULE 18 : if input1 is in1mf3 and input2 is in2mf4 then output is out1mf18
  RULE 19 : if input1 is in1mf3 and input2 is in2mf5 then output is out1mf19
  RULE 20 : if input1 is in1mf3 and input2 is in2mf6 then output is out1mf20
  RULE 21 : if input1 is in1mf3 and input2 is in2mf7 then output is out1mf21
  RULE 22 : if input1 is in1mf4 and input2 is in2mf1 then output is out1mf22
  RULE 23 : if input1 is in1mf4 and input2 is in2mf2 then output is out1mf23
  RULE 24 : if input1 is in1mf4 and input2 is in2mf3 then output is out1mf24
  RULE 25 : if input1 is in1mf4 and input2 is in2mf4 then output is out1mf25
  RULE 26 : if input1 is in1mf4 and input2 is in2mf5 then output is out1mf26
  RULE 27 : if input1 is in1mf4 and input2 is in2mf6 then output is out1mf27
  RULE 28 : if input1 is in1mf4 and input2 is in2mf7 then output is out1mf28
  RULE 29 : if input1 is in1mf5 and input2 is in2mf1 then output is out1mf29
  RULE 30 : if input1 is in1mf5 and input2 is in2mf2 then output is out1mf30
  RULE 31 : if input1 is in1mf5 and input2 is in2mf3 then output is out1mf31
  RULE 32 : if input1 is in1mf5 and input2 is in2mf4 then output is out1mf32
  RULE 33 : if input1 is in1mf5 and input2 is in2mf5 then output is out1mf33
  RULE 34 : if input1 is in1mf5 and input2 is in2mf6 then output is out1mf34
  RULE 35 : if input1 is in1mf5 and input2 is in2mf7 then output is out1mf35
  RULE 36 : if input1 is in1mf6 and input2 is in2mf1 then output is out1mf36
  RULE 37 : if input1 is in1mf6 and input2 is in2mf2 then output is out1mf37
  RULE 38 : if input1 is in1mf6 and input2 is in2mf3 then output is out1mf38
  RULE 39 : if input1 is in1mf6 and input2 is in2mf4 then output is out1mf39
  RULE 40 : if input1 is in1mf6 and input2 is in2mf5 then output is out1mf40
  RULE 41 : if input1 is in1mf6 and input2 is in2mf6 then output is out1mf41
  RULE 42 : if input1 is in1mf6 and input2 is in2mf7 then output is out1mf42
  RULE 43 : if input1 is in1mf7 and input2 is in2mf1 then output is out1mf43
  RULE 44 : if input1 is in1mf7 and input2 is in2mf2 then output is out1mf44
  RULE 45 : if input1 is in1mf7 and input2 is in2mf3 then output is out1mf45
  RULE 46 : if input1 is in1mf7 and input2 is in2mf4 then output is out1mf46
  RULE 47 : if input1 is in1mf7 and input2 is in2mf5 then output is out1mf47
  RULE 48 : if input1 is in1mf7 and input2 is in2mf6 then output is out1mf48
  RULE 49 : if input1 is in1mf7 and input2 is in2mf7 then output is out1mf49
END_RULEBLOCK

END_FUNCTION_BLOCK
